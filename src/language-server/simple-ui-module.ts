import { createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject, LangiumServices, LangiumSharedServices, Module, PartialLangiumServices } from 'langium';
import { SimpleUiGeneratedModule, SimpleUiGeneratedSharedModule } from './generated/module';
import { SimpleUICompletionProvider } from './simple-ui-completion';
import { SimpleUiValidationRegistry } from './simple-ui-validator';

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type SimpleUiServices = LangiumServices


let _cssClassNames: string[] = [];
export function setCSSClassNames(cssClasses: string[]) {
    _cssClassNames = cssClasses;
}

export function getCSSClassNames() {
    return _cssClassNames;
}

export function getCSSClasses(content: string): string[] {
    let regex = /(?<=\.)([a-zA-Z0-9]*([-]*[a-zA-Z0-9]*)*)/gm;
    let cssClasses = content.match(regex);
    if (cssClasses == null) return [];
    return cssClasses;
}

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const SimpleUiModule: Module<SimpleUiServices, PartialLangiumServices> = {
    validation: {
        ValidationRegistry: (injector) => new SimpleUiValidationRegistry(injector)
    },
    lsp: {
        CompletionProvider: (services) => new SimpleUICompletionProvider(services)
    }
};

/**
 * Inject the full set of language services by merging three modules:
 *  - Langium default services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 */
export function createSimpleUiServices(context: DefaultSharedModuleContext): { 
    shared: LangiumSharedServices, 
    simpleUi: SimpleUiServices 
} {
    const shared = inject(
        createDefaultSharedModule(context),
        SimpleUiGeneratedSharedModule
    );
    const simpleUi = inject(
        createDefaultModule({ shared }),
        SimpleUiGeneratedModule,
        SimpleUiModule
    );
    shared.ServiceRegistry.register(simpleUi);
    // SimpleUiValidationRegistry(simpleUi);
    return { shared, simpleUi };
}

